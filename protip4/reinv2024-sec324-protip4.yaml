AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::SecretsManager-2024-09-16
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - E3001 # Secrets Manager resources should not have a name
        - E3002 # Secrets Manager resources should not have a rotation schedule
Description:  >
  re:Invent2024 - Code Talk - SEC324 - ProTip#4

  Sample CloudFormation template to set up the prerequisites for your AWS account : 
  new VPC, private subnets for Lambda function and RDS database. VPC Endpoints are
  ceaated for RDS database and Secrets Manager.
  

Parameters:
  VpcCIDR:
    Type: String
    Default: '10.20.30.40/24'
  SubnetACIDR:
    Type: String
    Default: '10.20.30.40/26'
  SubnetBCIDR:
    Type: String
    Default: '10.20.30.64/26'
  ParamDBName:
    Type: String
    Default: 'Campaign'
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Default: 'MasterDBUser'
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBEngineVersion:
    Type: String
    Default: "8.0.42"
  DBPort:
    Type: Number
    Description: 'Database port'
    Default: 3306
  ParamDBName:
    Type: String
    Default: 'Campaign'
    Description: 'Database name'
  DBInstanceClass:
    Type: String
    Default: 'db.t3.micro'  
  DBUserA:
    Type: String
    Description: 'Database username for app'
    Default: 'DBUserA-test'
  DBUserB:
    Type: String
    Description: 'Database username for app'
    Default: 'DBUserB-test'
  ParamLambdaLayerMySQL:
    Type: String
    Default: 'PyMySQL-Layer:1'
    Description : 'Lambda Layer for PyMySQL'

Resources:
  # VPC and Network Configuration
  RssVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub VPC-${AWS::StackName}

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RssVPC
      CidrBlock: !Ref SubnetACIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet A

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RssVPC
      CidrBlock: !Ref SubnetBCIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet B

  # VPC Endpoints
  RDSVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      VpcId: !Ref RssVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.rds'
      VpcEndpointType: Interface
      SubnetIds: 
        - !Ref SubnetB
        - !Ref SubnetA
      SecurityGroupIds: 
        - !Ref EndpointSecurityGroup

  # VPC Endpoints
  SecretsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref RssVPC
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcEndpointType: Interface
      SubnetIds: 
        - !Ref SubnetB
        - !Ref SubnetA
      SecurityGroupIds: 
        - !Ref EndpointSecurityGroup

  # Security Groups
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !Ref RssVPC

  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Description: Allow Lambda access to RDS

  SelfReferenceIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref DBPort # Only MySQL port (3306)
      ToPort: !Ref DBPort # Only MySQL port (3306)
      SourceSecurityGroupId: !Ref RDSSecurityGroup
      Description: Allow all traffic from within the same security group

  RDSSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description : "SG Outbound - RDS - Limits non-stateful egress traffic to the loopback port"
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: "-1"
      CidrIp: 127.0.0.1/32

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda
      VpcId: !Ref RssVPC

  LambdaSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      DestinationSecurityGroupId: !Ref RDSSecurityGroup
      Description: Allow Lambda to access RDS

  LambdaSecurityGroupEgresstoEndPoint:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref EndpointSecurityGroup
      Description: Allow Lambda to access VPC endpoints

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC Endpoint
      VpcId: !Ref RssVPC

  EndpointSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EndpointSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Description: Allow Lambda access to VPC Endpoints
  EndpointSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description : "SG Outbound - VPCe - Limits non-stateful egress traffic from the instance to the loopback port"
      GroupId: !Ref EndpointSecurityGroup
      IpProtocol: "-1"
      CidrIp: 127.0.0.1/32

  DBUserASecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${AWS::StackName}-${DBUserA}'
      Description: !Sub 'Secret for MySQL database reader user: ${DBUserA}'
      KmsKeyId: alias/aws/secretsmanager
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${AWS::StackName}-${DBUserA}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  DBUserBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${AWS::StackName}-${DBUserB}'
      Description: !Sub 'Secret for MySQL database reader user: ${DBUserB}'
      KmsKeyId: alias/aws/secretsmanager
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${AWS::StackName}-${DBUserB}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W75
            reason: 'RDS instance is for demo purpose only. No backup retention period is needed'
          - id: F80
            reason: 'RDS instance is for demo purpose only. No deletion protection is needed'
          - id: W28
            reason: 'RDS instance is for demo purpose only. The name will vary with the Stack name'
          - id: F24
            reason: 'RDS instance is for demo purpose only. The MasterDBUsername has a default value'
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-${ParamDBName}'
      Engine: mysql
      EngineVersion: !Ref DBEngineVersion
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: 8
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
      ManageMasterUserPassword: true
      MasterUsername: !Ref DBUsername
      BackupRetentionPeriod: 0
      StorageEncrypted: true
      DeletionProtection: false
      EnableIAMDatabaseAuthentication: true
      Tags:
        - Key: Name
          Value: 'RDS instance for our application'


  # Lambda Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::${AWS::Partition}:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::${AWS::Partition}:policy/AmazonRDSReadOnlyAccess" # For automated RDS provision
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 
                  - !GetAtt RDSInstance.MasterUserSecret.SecretArn
                  - !GetAtt DBUserASecret.Id
                  - !GetAtt DBUserBSecret.Id

  # Lambda Function
  DBInitFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: 'CloudWatch Logs permissions provided by AWSLambdaVPCAccessExecutionRole managed policy'
    Properties:
      Description: 'Lambda function to create RDS database and users'
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import string
          import secrets
          import boto3
          import logging
          import datetime
          import os
          import pymysql

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            try:
              logger.info(f"Received event: {json.dumps(event)}")
              
              # Get RDS credentials from Secrets Manager
              secret_name = os.environ['MASTERDB_ARN']
              user1_secret = os.environ['USER1_PWD_ARN']
              user2_secret = os.environ['USER2_PWD_ARN']

              session = boto3.session.Session()
              secrets_manager = session.client('secretsmanager')

              master_creds = json.loads(secrets_manager.get_secret_value(SecretId=secret_name)['SecretString'])
              user1_creds = json.loads(secrets_manager.get_secret_value(SecretId=user1_secret)['SecretString'])
              user2_creds = json.loads(secrets_manager.get_secret_value(SecretId=user2_secret)['SecretString'])

              # Connect to RDS
              try:
                conn = pymysql.connect(
                    host=os.environ['DB_HOST'],
                    user=master_creds['username'],
                    password=master_creds['password']
                )
              except pymysql.MySQLError as e:
                logger.error("ERROR: Unexpected error: Could not connect to MySQL instance.")
                logger.error(e)
                raise

              cursor = conn.cursor()
              
              # Create database
              cursor.execute(f"CREATE DATABASE IF NOT EXISTS `{os.environ['DB_NAME']}`")
              cursor.execute(f"USE `{os.environ['DB_NAME']}`")
              # Create users
              username1 = user1_creds['username']
              password1 = user1_creds['password']
              username2 = user2_creds['username']
              password2 = user2_creds['password']


              # Create users using parameterized queries
              cursor.execute("CREATE USER IF NOT EXISTS %s@'%%' IDENTIFIED BY %s", (username1, password1))
              logger.info(f"User {username1} is created successfully")
              cursor.execute("CREATE USER IF NOT EXISTS %s@'%%' IDENTIFIED BY %s", (username2, password2))
              logger.info(f"User {username2} is created successfully")

              conn.commit()
              cursor.close()
              conn.close()
              logger.info(f"Database setup completed successfully - no longer using master user")

              # Connect to RDS using username1
              conn_user = pymysql.connect(
                  host=os.environ['DB_HOST'],
                  user=username1,
                  password=password1
              )

              cursor_user = conn_user.cursor()

              logger.info(f"Now let's try to connect with our fresh DB user: {username1}")

              # Query to get the current date and time
              cursor_user.execute("SELECT CURRENT_TIMESTAMP;")
              current_time = cursor_user.fetchone()
              logger.info(f"Current time in database: {current_time[0]}")

              # Query to get the current user
              cursor_user.execute("SELECT USER();")
              current_user = cursor_user.fetchone()
              logger.info(f"SELECT USER() returns: {current_user[0]}")

              cursor_user.close()
              conn_user.close()
              logger.info(f"Database setup completed successfully - connecting with {username1}")
              return {'statusCode': 200, 'body': 'Database setup completed'}

            except Exception as e:
                logger.error(f"Error during database initialization: {e}")
                

      Runtime: python3.12
      Timeout: 300
      MemorySize: 256
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref SubnetB
      Environment:
        Variables:
          MASTERDB_ARN: !GetAtt RDSInstance.MasterUserSecret.SecretArn
          USER1_PWD_ARN: !GetAtt DBUserASecret.Id
          USER2_PWD_ARN: !GetAtt DBUserBSecret.Id
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_NAME: !GetAtt RDSInstance.DBInstanceIdentifier
      Layers:
        - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:${ParamLambdaLayerMySQL}"


  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RssVPC
      Tags:
        - Key: Name
          Value: Private Route Table

  # Associate subnets with route table
  PrivateSubnetAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref PrivateRouteTable


  # Secret A Target Attachment
  SecretATargetAttachment:
    DependsOn: 
      - RDSInstance
      - DBInitFunction
      - DBUserASecret
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !GetAtt DBUserASecret.Id
      TargetId: !Ref RDSInstance
      TargetType: AWS::RDS::DBInstance

  # Secret B Target Attachment
  SecretBTargetAttachment:
    DependsOn: 
      - RDSInstance
      - DBInitFunction
      - DBUserBSecret
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !GetAtt DBUserBSecret.Id
      TargetId: !Ref RDSInstance
      TargetType: AWS::RDS::DBInstance

  # Rotation Schedule
  SecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretATargetAttachment
    Properties:
      SecretId: !Ref DBUserASecret
      HostedRotationLambda:
        RotationType: MySQLSingleUser
        RotationLambdaName: !Sub '${AWS::StackName}-${AWS::Region}-rotation-function'
        VpcSecurityGroupIds: !Join 
          - ","
          - - !Ref LambdaSecurityGroup
        VpcSubnetIds: !Join
          - ","
          - - !Ref SubnetB
      RotationRules:
        Duration: 1h
        ScheduleExpression: 'rate(4 days)'

Outputs:
  RDSEndpoint:
    Description: RDS Instance Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address

  SecretARN:
    Description: Secret ARN for RDS credentials
    Value: !GetAtt RDSInstance.MasterUserSecret.SecretArn