# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

---
AWSTemplateFormatVersion : "2010-09-09"
Description: >
  re:Invent2024 - Code Talk - SEC324 - ProTip#3

  Sample CloudFormation template to set up the prerequisites for your AWS account : 
  new VPC, public subnets, SGs
  NAT GW and internet GW to allow to download packages for Secrets Manager agent
  AWS EC2 instance with access via AWS Systems Manager Session Manager.

Parameters:
  ParamProjectName:
    Type: String
    Default: "reinv2024-sec324-protip3"
  ParamVPCCidr:
    Description: Main VPC CIDR Block
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.20.40.0/24
  ParamRssEC2SubnetACidr:
    Description: Priv Subnet A CIDR Block
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.20.40.0/26
  ParamSubnetBCidr:
    Description: Priv Subnet B CIDR Block
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.20.40.64/26
  ParamSubnetCCidr:
    Description: Pub Subnet C CIDR Block
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.20.40.128/26
  ParamLatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
  ParamEC2InstanceType:
    Type: String
    Default: t3.micro
  DBEngineVersion:
    Type: String
    Default: "8.0.42"
  DBPort:
    Type: Number
    Description: 'Database port'
    Default: 3306
  ParamDBName:
    Type: String
    Default: 'Campaign'
    Description: 'Database name'
  DBInstanceClass:
    Type: String
    Default: 'db.t3.micro'
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: 'DBAdminUser'
  DBUser:
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    Description: 'Database username for app'
    Default: 'Bob'
    
Resources:
  ## Generate secret for the DB User
  DBUserSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${AWS::StackName}-${DBUser}'
      Description: !Sub 'Secret for MySQL database reader user: ${DBUser}'
      KmsKeyId: alias/aws/secretsmanager
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${AWS::StackName}-${DBUser}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\''`[]{}()<>|&*;$!?^~#%'

  RssLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref ParamLatestAmiId
        InstanceType: !Ref ParamEC2InstanceType
        IamInstanceProfile:
          Name: !Ref RssSSMInstanceProfile
        SecurityGroupIds:
        - !Ref ComputeSecurityGroup
        MetadataOptions:
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 1
          HttpTokens: required
          InstanceMetadataTags: enabled
        UserData:
          Fn::Base64:
            !Sub 
            - |
              #!/bin/bash
              yum update -y
              yum update -y aws-cfn-bootstrap
              yum install -y jq git mariadb105 python3.12-pip
              python3.12 -m pip install pymysql boto3
              date
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent
          
              # Create Python script
              cat > /tmp/setup_db.py << 'EOF'
              #!/usr/bin/env python3.12
              import pymysql
              import boto3
              import json
              import logging

              # Configure logging
              logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
              logger = logging.getLogger(__name__)

              try:
                  logger.info("Starting database setup script")
                  
                  secrets_client = boto3.client('secretsmanager', region_name='${AWSRegion}')
                  
                  # Get DB Admin credentials from RDS MasterUserSecret
                  logger.info("Retrieving RDS master secret")
                  admin_secret = secrets_client.get_secret_value(SecretId='${MasterSecretArn}')
                  admin_creds = json.loads(admin_secret['SecretString'])
                  logger.info("Successfully retrieved RDS master credentials")
                  
                  # Get DBUser credentials
                  logger.info("Retrieving DBUser secret")
                  user_secret = secrets_client.get_secret_value(SecretId='${DBUserSecretArn}')
                  user_creds = json.loads(user_secret['SecretString'])
                  logger.info(f"Successfully retrieved DBUser credentials for user: {user_creds['username']}")
                  
                  # Connect without specifying database first
                  logger.info(f"Connecting to RDS host: '${host}'")
                  conn = pymysql.connect(
                      host='${host}',
                      user=admin_creds['username'],
                      password=admin_creds['password']
                  )
                  logger.info("Successfully connected to RDS as admin")
                  
                  cursor = conn.cursor()
                  logger.info("Creating database ${DBName}")
                  cursor.execute("CREATE DATABASE IF NOT EXISTS ${DBName}")
                  cursor.execute("USE ${DBName}")
                  logger.info("Database ${DBName} created/selected")                  
                             
                  logger.info("Creating Mocktail table and the effort done to promote each")
                  cursor.execute("""
                  CREATE TABLE Mocktail (
                      id INT PRIMARY KEY AUTO_INCREMENT,
                      name VARCHAR(100),
                      ingredients TEXT,
                      recipe TEXT,
                      promotion_effort VARCHAR(200),
                      target_public VARCHAR(100),
                      promotion_results TEXT
                  )
                  """)
                  logger.info("Mocktail table created")
                  
                  mocktails = [
                      ("Virgin Mojito", "Mint, lime, soda water, sugar", "Muddle mint and lime, add sugar, top with soda", "Social media campaign, influencer partnerships", "Health-conscious millennials", "25% increase in orders, 15K social media impressions"),
                      ("Shirley Temple", "Ginger ale, grenadine, cherry", "Mix ginger ale with grenadine, garnish with cherry", "Kids menu promotion, family restaurant partnerships", "Families with children", "40% increase in family dining, featured in 50 restaurants"),
                      ("Virgin Pina Colada", "Pineapple juice, coconut cream, ice", "Blend all ingredients until smooth", "Summer festival booths, beach resort partnerships", "Vacation travelers, beach-goers", "30% summer sales boost, 20 resort partnerships established"),
                      ("Virgin Mary", "Tomato juice, worcestershire, tabasco, celery", "Mix all ingredients, garnish with celery stick", "Brunch menu feature, health food stores", "Health enthusiasts, brunch crowd", "20% brunch sales increase, 12 health store partnerships"),
                      ("Arnold Palmer", "Iced tea, lemonade", "Mix equal parts iced tea and lemonade", "Golf course partnerships, sports events", "Golf players, sports fans", "Featured in 25 golf courses, 18% sports venue sales"),
                      ("Virgin Moscow Mule", "Ginger beer, lime juice, mint", "Mix in copper mug with ice, garnish with lime", "Trendy bar promotions, Instagram campaigns", "Young professionals, social media users", "35% bar mocktail sales, 22K Instagram engagement"),
                      ("Cucumber Mint Cooler", "Cucumber, mint, lime, sparkling water", "Muddle cucumber and mint, add lime and sparkling water", "Spa partnerships, wellness events", "Spa clients, wellness enthusiasts", "Featured in 15 spas, 28% wellness event bookings"),
                      ("Berry Lemonade", "Mixed berries, lemon juice, sugar, water", "Blend berries, mix with lemon juice and sugar", "Farmers market booths, summer festivals", "Families, festival attendees", "Sold 2000+ cups at festivals, 45% repeat customers"),
                      ("Tropical Punch", "Pineapple juice, orange juice, cranberry juice", "Mix all fruit juices, serve over ice", "Tropical themed events, cruise partnerships", "Vacation seekers, cruise passengers", "Featured on 8 cruise lines, 33% tropical event bookings"),
                      ("Ginger Lime Fizz", "Fresh ginger, lime juice, club soda, honey", "Muddle ginger, add lime and honey, top with soda", "Health food cafes, yoga studios", "Health conscious consumers", "Available in 30 cafes, 25% yoga studio partnerships"),
                      ("Watermelon Mint Splash", "Watermelon, mint, lime, sparkling water", "Blend watermelon, muddle mint, add lime and sparkling water", "Summer pool parties, outdoor events", "Pool party hosts, outdoor enthusiasts", "Featured at 50+ pool parties, 40% outdoor event bookings"),
                      ("Pomegranate Sparkler", "Pomegranate juice, lemon juice, sparkling water", "Mix pomegranate and lemon juice, top with sparkling water", "Antioxidant health campaigns, upscale restaurants", "Health-focused diners, upscale clientele", "Menu item in 20 upscale restaurants, 22% health campaign engagement"),
                      ("Lavender Lemonade", "Lavender syrup, lemon juice, water", "Mix lavender syrup with lemon juice and water", "Boutique cafe partnerships, wedding venues", "Cafe enthusiasts, wedding guests", "Signature drink in 12 boutique cafes, 60 wedding bookings"),
                      ("Peach Iced Tea", "Peach puree, black tea, honey", "Blend peach puree with cooled tea and honey", "Southern restaurant chains, tea shop partnerships", "Southern food lovers, tea enthusiasts", "Featured in 35 Southern restaurants, 28% tea shop sales increase"),
                      ("Coconut Lime Cooler", "Coconut water, lime juice, mint", "Mix coconut water with lime juice, garnish with mint", "Fitness center partnerships, beach clubs", "Fitness enthusiasts, beach club members", "Available in 40 fitness centers, 50% beach club adoption")
                  ]

                  logger.info("Inserting mocktail data")
                  cursor.executemany("INSERT INTO Mocktail (name, ingredients, recipe, promotion_effort, target_public, promotion_results) VALUES (%s, %s, %s, %s, %s, %s)", mocktails)
                  
                  logger.info(f"Creating user: {user_creds['username']}")
                  cursor.execute("CREATE USER %s@'%%' IDENTIFIED BY %s", (user_creds['username'], user_creds['password']))
                  cursor.execute(f"GRANT SELECT ON ${DBName}.Mocktail TO '{user_creds['username']}'@'%'")
                  logger.info("User created and SELECT permissions granted")

                  conn.commit()
                  logger.info(f"Successfully inserted {len(mocktails)} mocktail records")
                  conn.close()
                  
                  # Verify DBUser can connect and query
                  logger.info(f"Verifying DB User connection with username: {user_creds['username']}")
                  try:
                      user_conn = pymysql.connect(
                          host='${host}',
                          user=user_creds['username'],
                          password=user_creds['password'],
                          database='${DBName}'
                      )
                      user_cursor = user_conn.cursor()
                      user_cursor.execute("SELECT COUNT(*) FROM Mocktail")
                      count = user_cursor.fetchone()[0]
                      logger.info(f"SUCCESS: {user_creds['username']} can connect and query. Found {count} mocktail records")

                      # Query for 3 most popular mocktails ordered by promotion results
                      logger.info("{user_creds['username']} is looking for 3 most popular mocktails ordered by promotion results...")
                      user_cursor.execute("SELECT name, target_public, promotion_results FROM Mocktail ORDER BY promotion_results DESC LIMIT 3")
                      popular_mocktails = user_cursor.fetchall()
                      logger.info("Top 3 mocktails by promotion results:")
                      for i, (name, target_public, results) in enumerate(popular_mocktails, 1):
                          logger.info(f"{i}. {name} - Target: {target_public} - Results: {results}")


                      user_conn.close()
                  except Exception as e:
                      logger.error(f"ERROR: DBUser connection failed: {str(e)}")
                      raise
                  
                  logger.info("Database setup completed successfully")
                  
              except Exception as e:
                  logger.error(f"Database setup failed: {str(e)}")
                  raise

              EOF
              
              # Run the script and capture logs
              #python3.12 /tmp/setup_db.py > /var/log/db_setup.log 2>&1
              #echo "Database setup script completed. Check /var/log/db_setup.log for details"
              
              # Run the script and capture logs
              if python3.12 /tmp/setup_db.py > /var/log/db_setup.log 2>&1; then
                  echo "Database setup completed successfully"
                  /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource RssEC2InstanceTest --region ${AWS::Region}
              else
                  echo "Database setup failed"
                  /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource RssEC2InstanceTest --region ${AWS::Region}
              fi


              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent
            - MasterSecretArn: !GetAtt RDSInstance.MasterUserSecret.SecretArn
              DBName: !Ref ParamDBName
              DBUserSecretArn: !GetAtt DBUserSecret.Id
              AWSRegion: !Ref AWS::Region
              host: !GetAtt RDSInstance.Endpoint.Address
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: RemoteAccess
            Value: "SSM Session Manager is your friend NO NEED for SSH ;-)"
          - Key: Role
            Value: "EC2 with Linux AMI for Secrets Manager Agent to simulate Hybrid"
  #Deploy the EC2 instance, attach an Instance Profile that allows the EC2 instance to call SSM
  RssSSMRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: 'The IAM role name will vary with the Stack name'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
            Condition:
              StringEquals:
                  "aws:SourceAccount": !Sub ${AWS::AccountId}
      Path: /
      RoleName: !Sub ${AWS::StackName}-EC2SSMRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::${AWS::Partition}:policy/AmazonSSMManagedInstanceCore
  
  InstanceRolePolicies:
    Type: AWS::IAM::Policy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: 'Allowing to list secrets, and get secrets'
    Properties:
      PolicyName: EC2InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:Describe*
              - secretsmanager:List*
              - secretsmanager:GetSecretValue
              - secretsmanager:BatchGetSecretValue
            Resource: '*'
          - Effect: Allow
            Action: 
              - rds-db:connect
              - rds:DescribeDBInstances
            Resource: '*'
      Roles:
        - !Ref 'RssSSMRole'
      
#EC2 instance to allow management by SSM Session Manager
  RssSSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-SSMInstanceProfile
      Path : /
      Roles: [!Ref RssSSMRole]

#EC2 instance created from Launch Template
  RssEC2InstanceTest:
    DependsOn: RssLaunchTemplate
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    Properties:
      LaunchTemplate: 
          LaunchTemplateId: !Ref RssLaunchTemplate
          Version: 1
      SubnetId: !Ref RssEC2SubnetA
      Tags:
      - Key: Name
        Value: !Sub CF-Linux-PrivA-#1-${AWS::StackName}

         
#Create the VPC which will host our EC2 instances
  RssMainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref ParamVPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: WhatFor
        Value: !Sub "RssMainVPC to try out - ${ParamProjectName}"
      - Key: Name
        Value: !Sub RssMainVPC - ${ParamProjectName}

  
#Let's enable Flow logs on that VPC
  RssVPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt RssFlowLogRole.Arn
      LogGroupName: !Ref RssFlowLogsGroup
      ResourceId: !Ref RssMainVPC
      ResourceType: VPC
      TrafficType: ALL
      Tags:
      - Key: Name
        Value: !Sub RssVPCFlowLog - ${ParamProjectName}

#Our FlowLog needs a role to send logs to CloudWatch
  RssFlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "vpc-flow-logs.amazonaws.com"
          Action: "sts:AssumeRole"
          Condition:
            StringEquals:
                "aws:SourceAccount": !Sub ${AWS::AccountId}
      Policies:
      - PolicyName: "flowlogs-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "logs:DescribeLogGroups"
            - "logs:DescribeLogStreams"
            Resource: !GetAtt "RssFlowLogsGroup.Arn"
            
#And now for the VPC FlowLog CloudWatch LogGroup
  RssFlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: 'CloudWatch LogGroup is encrypted at rest by default, as it contains log data'
    Properties:
      LogGroupName : !Sub ${AWS::StackName}-VPCFlowLogs
      RetentionInDays: 3

#Deploy Private subnet A in AZ a
  RssEC2SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RssMainVPC
      CidrBlock: !Ref ParamRssEC2SubnetACidr
      AvailabilityZone: !Select [ 0, !GetAZs ]  # Get the first AZ in the list
      Tags:
      - Key: Project
        Value: !Ref ParamProjectName
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivSubnet-A
  
#Deploy Private subnet B in AZ b
  RssEC2SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RssMainVPC
      CidrBlock: !Ref ParamSubnetBCidr
      AvailabilityZone: !Select [ 1, !GetAZs ]  # Get the 2ND AZ in the list
      Tags:
      - Key: Project
        Value: !Ref ParamProjectName
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivSubnet-B

#Deploy Public Subnet C in AZ a
  RssEC2SubnetC:
    Type: AWS::EC2::Subnet
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: 'This is a public subnet that will host the NAT Gateway so public access is needed'
    Properties:
      VpcId: !Ref RssMainVPC
      CidrBlock: !Ref ParamSubnetCCidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]  # Get the first AZ in the list
      Tags:
      - Key: Project
        Value: !Ref ParamProjectName
      - Key: Name
        Value: !Sub ${AWS::StackName}-PubSubnet-C

# Create an internet GW
  RssInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "IGW - ${AWS::StackName}"

# Attach the IGW to the VPC
  RssVpcIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref RssMainVPC
      InternetGatewayId: !Ref RssInternetGateway


# create route table for public subnets
  RssPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RssMainVPC
      Tags:
      - Key: Name
        Value: "Public Route Table"
      - Key: Project
        Value: !Ref ParamProjectName

# create public route for IGW
  RssPublicIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RssPublicRouteTable
      GatewayId: !Ref RssInternetGateway
      DestinationCidrBlock: 0.0.0.0/0

# create public subnet route associations for SubnetC
  RssPublicSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RssPublicRouteTable
      SubnetId: !Ref RssEC2SubnetC

# create a NAT Gateway for public subnets 
  RssNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt RssNatGatewayEIP.AllocationId
      SubnetId: !Ref RssEC2SubnetC

# create an Elastic IP for the NAT Gateway
  RssNatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

# create route table for private subnets
  RssPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RssMainVPC
      Tags:
      - Key: Name
        Value: "Private Route Table"
      - Key: Project
        Value: !Ref ParamProjectName  

# create private route for NAT Gateway
  RssPrivateNatGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RssPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref RssNatGateway

# create private route table associations
  RssPrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RssPrivateRouteTable
      SubnetId: !Ref RssEC2SubnetA


#Deploy the Security Group for the private EC2
  ComputeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: 'This SG will be attached to private compute that need internet connectivity'
    Properties:
      VpcId: !Ref RssMainVPC
      GroupDescription: Private EC2 Security Group
      Tags:
        - Key: Name
          Value: "Private EC2 Security Group"
  #Ingress rule allowing traffic from the EC2 
  ComputeSecurityGrouppEgressHTTPS:
    Type : AWS::EC2::SecurityGroupEgress
    Properties:
      Description : "SG Outbound EC2 - HTTPS"
      GroupId: !Ref ComputeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  ComputeSecurityGroupEgressRDS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ComputeSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      DestinationSecurityGroupId: !Ref RDSSecurityGroup
      Description: Allow Lambda to access RDS

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !Ref RssMainVPC

  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      SourceSecurityGroupId: !Ref ComputeSecurityGroup
      Description: Allow Compute access to RDS
  RDSSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description : "SG Outbound - RDS - Limits non-stateful egress traffic to the loopback port"
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: "-1"
      CidrIp: 127.0.0.1/32

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref RssEC2SubnetA
        - !Ref RssEC2SubnetB

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F24
            reason: 'RDS instance is for demo purpose only. Fixing a DB Admin User ease the deployment'
          - id: W75
            reason: 'RDS instance is for demo purpose only. No backup retention period is needed'
          - id: F80
            reason: 'RDS instance is for demo purpose only. No deletion protection is needed'
          - id: W28
            reason: 'RDS instance is for demo purpose only. The name will vary with the Stack name'
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-${ParamDBName}'
      Engine: mysql
      EngineVersion: !Ref DBEngineVersion
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: 8
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
      ManageMasterUserPassword: true
      MasterUsername: !Ref DBUsername
      BackupRetentionPeriod: 0
      DeletionProtection: false
      EnableIAMDatabaseAuthentication: true
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: 'RDS instance for Mocktail info'


Outputs:
  OutStackName:
    Description: "Stack name."
    Value: !Sub "${AWS::StackName}"

  #DB User ARN
  DBUserSecretArn:
    Description: ARN of the DB User Secret
    Value: !Ref DBUserSecret
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-DBUserSecretArn
  
  # Database Endpoint
  DatabaseEndpoint:
    Description: RDS Database Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-DatabaseEndpoint

  # EC2 Instance
  EC2InstanceId:
    Description: EC2 Instance ID
    Value: !Ref RssEC2InstanceTest
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-EC2InstanceId
    
# IAM Role
  EC2RoleArn:
    Description: EC2 IAM Role ARN
    Value: !GetAtt RssSSMRole.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-EC2RoleArn

  # Create VPC
  VPCId:
    Description: VPCId of VPC
    Value: !Ref RssMainVPC
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-VPC