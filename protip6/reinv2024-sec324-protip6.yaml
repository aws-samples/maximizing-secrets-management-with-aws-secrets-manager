# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

---
AWSTemplateFormatVersion : "2010-09-09"
Description: >
  re:Invent2024 - Code Talk - SEC324
  Pro Tip#6 :  Compliance and incident response
  This code will show how to monitor the compliance on secrets based on 
  AWS Config rules and send notifications to SNS topic
  SNS topic will be created, and two secrets will be created with default encryption
  and a KMS encryption secret.
  IMPORTANT: AWS Config must be enabled in the region

# Parameters used for this template
Parameters:
  ParamProjectName:
    Type: String
    Default: "r24-sec324-protip6"
  ParamSubscription:
    Type: String
    Description: The endpoint for notification.
    Default: "sec324-maxsecretsmanagement@proton.me"
  ParamExcludeCharacters:
    Type: String
    Default: '\"@\\ '
  ParamPasswordLength:
    Type: Number
    Description: "The minimum length for the password"
    Default: 20
  ParamSubscriptionProtocol:
    Type: String
    Description: The protocol used to notify the subscribed parties
    AllowedValues:
    - http
    - https
    - email
    - email-json
    - sms
    - sqs
    - application
    - lambda
    Default: email

# Resources to be created
Resources:
# Creation of the first secret with default encryption
  SecretProTip6A:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub "${AWS::StackName}-SecretA"
      KmsKeyId: alias/aws/secretsmanager
      Description: !Sub "This secret has a dynamically generated password of ${ParamPasswordLength}."
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username":" ${AWS::StackName}-username-a"}'
        GenerateStringKey: "password"
        PasswordLength: !Ref ParamPasswordLength
        ExcludeCharacters: !Ref ParamExcludeCharacters

# Creation of the second secret with KMS encryption
  SecretProTip6B:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub "${AWS::StackName}-SecretB"
      Description: !Sub "This secret has a dynamically generated password of ${ParamPasswordLength}."
      KmsKeyId: !Ref SecretKeyAlias
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username":" ${AWS::StackName}-username-b"}'
        GenerateStringKey: "password"
        PasswordLength: !Ref ParamPasswordLength
        ExcludeCharacters: !Ref ParamExcludeCharacters

# Create a KMS key to encrypt Secret
  SecretCMKKMSKey:
    Type: 'AWS::KMS::Key'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: 'There are conditions to restrict the principal who can use the key'
    Properties:
      Description: Customer Managed Key to encrypt secret at rest
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub ${AWS::StackName}_CMK_ID
        Statement:
          - Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: "Allow use of the key through AWS Secrets Manager"
            Effect: "Allow"
            Principal:
              AWS: '*'
            Action:
            - 'kms:GenerateDataKey*'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Sub ${AWS::AccountId}
              StringLike:
                'kms:ViaService': !Sub 'secretsmanager.${AWS::Region}.amazonaws.com'
          - Sid: "Allow access to key metadata inside the account"
            Effect: "Allow"
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - 'kms:Describe*'
              - 'kms:Get*'
              - 'kms:List*'
              - 'kms:RevokeGrant'
            Resource: '*'

  SecretKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub alias/${AWS::StackName}-Alias-CMK
      TargetKeyId: !Ref SecretCMKKMSKey

# Create a config rule to monitor secret rotation
  ConfigRuleSecretUsingCMK:
    Type: 'AWS::Config::ConfigRule'
    Properties:
      ConfigRuleName: !Sub ${AWS::StackName}-ConfigRuleSecretUsingCMK
      Description: !Sub "Provisioning of new version of AWS Secrets Manager secret without rotation"
      Scope:
        ComplianceResourceTypes:
          - 'AWS::SecretsManager::Secret'
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_USING_CMK

# EventBridge rule with Config rule non compliance as source and sns as target
  EventBridgeRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub ${AWS::StackName}-EBRule-Config
      EventBusName: default
      Description: !Sub "EventBridge rule to send non-compliant Config rule events to SNS topic"
      State: "ENABLED"
      EventPattern:
        source:
        - "aws.config"
        detail-type:
        - "Config Rules Compliance Change"
        detail:
          messageType:
          - "ComplianceChangeNotification"
          newEvaluationResult:
            complianceType:
            - "NON_COMPLIANT"
          configRuleName:
          - !Sub ${AWS::StackName}-ConfigRuleSecretUsingCMK
      Targets:
      - Id: "0"
        Arn:
          Ref: SNSTopic


# Creating a SNS Topic and the associated subscriptions
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-SNSTopic
      kmsMasterKeyId: !Ref SNSCMKKMSKey
      Subscription:
        - Endpoint:
            Ref: ParamSubscription
          Protocol:
            Ref: ParamSubscriptionProtocol


# Create KMS key for SNS topic
  SNSCMKKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: Customer Managed Key to encrypt SNS topic at rest
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub ${AWS::StackName}_SNS_CMK_ID
        Statement:
          - Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: "Allow use of the key by EventBridge"
            Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "kms:GenerateDataKey*"
              - "kms:Decrypt"
            Resource: "*"
          - Sid: "Allow access to key metadata inside the account"
            Effect: "Allow"
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - 'kms:Describe*'
              - 'kms:Get*'
              - 'kms:List*'
              - 'kms:RevokeGrant'
            Resource: '*'

# SNS Topic policy to allow EventBridge rule to publish to SNS topic
  SNSTopicPolicyEventBridgeRule:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      Topics:
      - !Ref SNSTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: "Allow Publish from EventBridge"
          Effect: "Allow"
          Principal:
            Service: "events.amazonaws.com"
          Action: "sns:Publish"
          Resource: !Ref SNSTopic
          Condition:
            ArnEquals:
              "aws:SourceArn":
              - !GetAtt EventBridgeRule.Arn

# Outputs
Outputs:
  OutStackName:
    Description: "Stack name."
    Value: !Sub "${AWS::StackName}"
  SecretProTip6A:
    Value:
      Fn::GetAtt: SecretProTip6A.Id
  SecretProTip6B:
    Value:
      Fn::GetAtt: SecretProTip6B.Id
  TopicARN:
    Description: ARN of the SNS Topic we created 
    Value:
      Ref: SNSTopic